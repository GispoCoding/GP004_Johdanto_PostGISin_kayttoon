[["index.html", "Johdanto PostgreSQL:n käyttöön 1 Johdanto 1.1 Harjoitusmateriaalin lisenssi", " Johdanto PostgreSQL:n käyttöön Gispo Oy 2022-02-04 1 Johdanto Tervetuloa kurssin harjoitusten pariin! 1.1 Harjoitusmateriaalin lisenssi "],["työkalujen-käyttö-pgadmin-ja-psql.html", "2 Työkalujen käyttö: PgAdmin ja psql 2.1 PgAdmin 4 2.2 psql 2.3 pg_dump ja pg_restore", " 2 Työkalujen käyttö: PgAdmin ja psql Tässä osassa tutustutaan PgAdmin-käyttöliittymään sekä psql:ään. 2.1 PgAdmin 4 Käynnistä PgAdmin 4 menemällä osoitteeseen /pgadmin/ (http://esimerkki.fi/pgadmin/). Kirjaudu sisään kouluttajan antamalla tunnuksella ja salasanalla. pgadmin_splash 2.1.1 Tietokantayhteyden lisääminen Luo uusi tietokantayhteys tietokantaklusteriin klikkaamalla hiiren oikealla kohdasta Servers ja valitsemalla Create &gt; Server… Täytä seuraavat tiedot: Välilehdellä General: Name: yhteyden nimi. Vapaavalintainen yhteyden nimi, jolla sen tunnistat myöhemmin. Tyypillinen notaatio on &lt;käyttäjänimi&gt;@&lt;host&gt;/&lt;tietokanta&gt; Välilehdellä Connection: Host: postgres_training (jupyter, pgadmin ja postgresql ovat dockerin sisällä, joten localhost ei käy tässä) Port: 5432 Maintenance database: postgres User: Kysy kouluttajalta Password: Kysy kouluttajalta Valitse Save password, jos et halua kirjoittaa sitä uudestaan avatessasi yhteyden Tietokantayhteyden lisääminen 2.1.2 Kyselytyökalun käyttäminen (Query Tool) Kyseyltyökalun avulla voi suorittaa SQL-kyselyitä ja lauseita. Käynnistä se seuraavasti: Valitse Servers-osiosta tietokantaklusterisi Valitse klusterin sisältä haluamasi tietokanta Valitse ylhäältä Tools &gt; Query Tool Voit suorittaa lauseita painamalla F5 Jos haluat suorittaa vain osan lauseista, maalaam hiirellä haluttu osio ja paina F5 Kyselytyökalun käyttäminen 2.1.3 Tietokantayhteyden sulkeminen Klikkaa hiiren oikealla luomastasi yhteydestä ja valitse Disconnect Server. Tämä on erityisen tärkeää, kun kurssilla on monta osallistujaa. 2.2 psql Avaa komentorivi, jotta pääset käyttämään psql-komentorivityökalua. Tämän jälkeen yhdistä omaan tietokataklusteriin komennolla: psql psql komentorivityökalun käyttminen Tietokantayhteyden parametrit on asetettu ympäristömuuttujiksi, joten niitä ei tarvitse antaa komentoa ajaessa. 2.2.1 Käyttäminen Kun psql on käynnistetty, komentorivillä voit kirjoittaa sekä psql, että SQL-komentoja. Tosin psql sessiossa käytettäviä komentoja kutsutaan psql interaktiiviseksi. Alla muutama interaktiivinen psql-komento: näytä taulut, näkymät ja sekvenssit = näytä tietokantaklusterin roolit (käyttäjät) _nimi = yhdistä tietokannan_nimi -tietokantaan Komennolla help ja erityisesti komennolla ? saat tietoa ohjelman eri komennoista. Pääset pois listauksesta painamalla q. SQL-kyselyiden syntaksista saat ohjeita komennolla \\h esim. \\h ALTER DEFAULT. SQL esimerkit: select current_database(); Komentorivin puolella käytettäviä psql-komentoja kutsutaan ei-interaktiivisiksi. Ei-interaktiivisia psql komentoja käytetään kun halutaan käyttää psql:a suoraan käyttöjärjestelmän komentorivista ja valittavat psql-komennot ja SQL-skriptit ovat tiedostossa. Ei-interaktiivinen psql sopii erityisesti tehtävien automaattisointiin. Esimerkiksi, aiemmin esitetyt yhteydenottokomennot ovat ei-interaktiivisia psql-komentoja. Kokeile seuraavaa komentoa komentoriviltä: psql -c &quot;select current_database();&quot; 2.2.2 Tietokantayhteyden sulkeminen Sulkeaksesi tietokantayhteyden anna psql-ohjelmassa komento: 2.3 pg_dump ja pg_restore Tietokannan tai yksittäisten taulujen varmuuskopioiden luomiseen ja palauttamiseen on omat komentoriviohjelmansa: pg_dump ja pg_restore. Muun muassa pgAdmin käyttää näitä sisäisesti. "],["tietokannan-ja-taulujen-luonti.html", "3 Tietokannan ja taulujen luonti 3.1 Tietokannan luominen 3.2 Tietokannan poistaminen 3.3 Harjoitus 3.1: Luo uusi tietokanta 3.4 Harjoitus 3.2", " 3 Tietokannan ja taulujen luonti Tässä osassa luodaan tietokanta, johon lisätään erilaisia tauluja. 3.1 Tietokannan luominen Tietokannan voi luoda useammalla eri tavalla. 3.1.1 createdb createdb on komentorivityökalu helpottamaan tietokannan luomista. Helpoimmillaan uuden tietokannan luominen onnistuukin komennolla: createdb uuden_tietokannan_nimi Tietokannan luominen Kuten psql, myös createdb lukee tietokannan yhteysparametrit ympäristömuuttujista. 3.1.2 PgAdmin Kuten miltei kaikkeen muuhunkin, PgAdmin tarjoaa myös tietokantojen luomiseen ja poistamiseen graafisen ratkaisun: Klikkaa oikealla tietokantayhteydesta &gt; Create &gt; Database. createdb_pgadmin 3.1.3 SQL Perinteisin tapa tietokantojen luomiseen käy kuitenkin SQL:n kautta. Alla olevan komennon voi suorittaa psql:n tai PgAdminin Query Toolin) avulla: CREATE DATABASE uuden_tietokannan_nimi fdafas; 3.2 Tietokannan poistaminen 3.2.1 dropdb dropdb samoin kuin createdb on komentorivityökalu. Helpoimmillaan tietokannan voi poistaa komennolla: dropdb poistettavan_tietokannan_nimi 3.2.2 SQL Samaan tapaan kuin luotaessa DROP DATABASE poistettavan_tietokannan_nimi 3.3 Harjoitus 3.1: Luo uusi tietokanta Luo uusi tietokanta “koulutus” createdb:n, pgAdmin:in tai psql:n avulla. 3.3.1 Taulujen luominen PostgreSQL tarjoaa monipuolisen tavan luoda tauluja, näkymiä ja materialisoituja näkymiä. Luodaan yksinkertainen tietokantataulu kurssi siten, että sillä on kentät koodi, nimi, pvm, tyyli ja kesto. DROP TABLE IF EXISTS kurssi CASCADE; CREATE TABLE kurssi ( koodi varchar(5) CONSTRAINT firstkey PRIMARY KEY, nimi text NOT NULL, pvm date, tyyli text, kesto integer CHECK (kesto &gt; 0) ); COMMENT ON COLUMN kurssi.kesto IS &#39;Kurssin kesto tunteina&#39;; Tauluja voi luoda myös SQL-kyselyiden tuloksien perusteella. Luodaan yksinkertainen taulu, johon tulisi kurssi-taulun rivit, joiden kesto on yksi. DROP TABLE IF EXISTS kurssi_1; CREATE TABLE kurssi_1 AS ( SELECT koodi, nimi, pvm, tyyli, 1 kesto FROM kurssi WHERE kesto = 1 ); Luonnollisestikin näkymä olisi järkevämpi vaihtoehto äskeiseen: DROP VIEW IF EXISTS kurssi_1_view; CREATE view kurssi_1_view AS ( SELECT koodi, nimi, pvm, tyyli, kesto FROM kurssi WHERE kesto = 1 ); 3.3.2 Rivien lisääminen Tauluun voidaan lisätä rivejä INSERT-komennoilla, tai esimerkiksi kyselyjen tuloksien avulla INSERT INTO kurssi(koodi, nimi, pvm, tyyli, kesto) VALUES (&#39;A1111&#39;, &#39;PG-peruskurssi&#39;, &#39;2020-10-01&#39;, &#39;Jupyter&#39;, &#39;15&#39;); PostgreSQL:n avulla voi lisätä myös useamman rivin yhdellä kertaa ja jos arvot ovat samassa järjestyksessä, kuin kentät, ei kenttien nimiä tarvitse antaa INSERT INTO kurssi VALUES (&#39;A1112&#39;, &#39;PG-kertaus&#39;, &#39;2020-10-03&#39;, &#39;Jupyter&#39;, &#39;1&#39;), (&#39;C1111&#39;, &#39;PG-peruskurssi&#39;, &#39;2021-10-01&#39;, &#39;Jupyter&#39;, &#39;15&#39;), (&#39;C1112&#39;, &#39;PG-seuraavan_vuoden&#39;, &#39;2021-10-03&#39;, &#39;Jupyter&#39;, &#39;1&#39;); Rivejä voi lisätä myös kyselyjen tuloksena. Tässä hyödynnetään samalla WITH-kyselyitä (CTE, Common Table Expressions). WITH alikysely AS (SELECT 1 a, 2 b) SELECT * FROM alikysely WHERE a = 1; WITH kertauskurssi AS (SELECT * FROM kurssi WHERE nimi like &#39;%kertaus%&#39;) INSERT INTO kurssi ( SELECT &#39;B1111&#39;, nimi, pvm, tyyli FROM kertauskurssi ); 3.3.3 Kyselyjen tekeminen Tarkistetaan, että rivit ilmeistyivät tauluun. Tyypillisesti tähtikyselyitä tehdessä muista käyttää LIMIT-ehtoa rajoittaaksesi rivien määrää: SELECT * FROM kurssi LIMIT 10; WITH-syntaksin avulla: WITH kertauskurssit AS (SELECT * FROM kurssi WHERE nimi LIKE &#39;%kertaus%&#39;) SELECT * FROM kertauskurssit ORDER BY koodi DESC; Tarksitetaan vielä näkymän rivit: SELECT * FROM kurssi_1_view LIMIT 10; 3.4 Harjoitus 3.2 Harjoituksena on luoda uusi tietokantataulu etunimet, joka vastaa tiedoston etunimet.csv muotoa. Katso edeltäviä esimerkkejä kenttien tietotyyppien päättelemiseksi. DROP TABLE IF EXISTS etunimet; CREATE ... Vastaus: Harjoitus 3.2 Nyt lisää tiedoston sisältö tauluun. Tämän voi tehdä SQL:n avulla seuraavasti (superuser-käyttäjällä): COPY etunimet(nimi, lukumaara, sukupuoli) FROM &#39;/home/oppilas/pg-training/Harjoitukset/data/&lt;tiedoston-nimi&gt;&#39; CSV HEADER; tai psql: avulla. Tällöin ei tarvitse olla superuser-käyttäjä (muista kirjautua oikeaan tietokantaan ): \\COPY etunimet FROM &#39;/home/oppilas/pg-training/Harjoitukset/data/&lt;tiedoston-nimi&gt;&#39; WITH CSV HEADER HEADER kuvaa sitä, että csv-tiedoston ensimmäinen rivi jätetään huomioimatta, sillä se sisältää sarakkeiden nimet. Lisää tiedoston sisältö tauluun valitsemallasi tavalla. Vastaus: Harjoitus 3.2 Tarkistus: Varmistu, että luomassasi taulussa on oikea määrä rivejä ja tutustu halutessasi dataan. SELECT count(*) FROM etunimet; SELECT * FROM etunimet ORDER BY lukumaara DESC LIMIT 100; "],["tietotyypit.html", "4 Tietotyypit 4.1 Harjoitus 4.1: Ota oikea tietotyyppi käyttöön 4.2 Harjoitus 4.2 4.3 Geometriatyyppi 4.4 Harjoitus 4.3: Visualisoi geometrioita pgAdmilla", " 4 Tietotyypit Tässä osassa tutustutaan erilaisiin tietotyyppeihin. Tutustutaan aluksi tieliikenne-taulun sisältöön SELECT * FROM tieliikenne LIMIT 30; Tarkistetaan, kuinka monen ajoneuvon ensirekiseröinti on tapahtunut vuoden 2015 jälkeen. SELECT count(*) FROM tieliikenne WHERE EXTRACT(YEAR FROM ensirekisterointipvm) &gt; 2015; Yllä oleva komento tuottaa virheen: function pg_catalog.extract(unknown, text) does not exist. Tämä vihjaisi siis, että kentän ensirekisterointipvm tietotyyppi olisi text, mikä ei suinkaan ole paras tietotyyppi päivämäärän säilyttämiseen. Tarkistetaan vielä information_schema-taulusta pvm-kenttien tietotyypit: SELECT column_name, data_type FROM information_schema.columns WHERE table_name = &#39;tieliikenne&#39; AND column_name LIKE &#39;%pvm%&#39; ; Sarake ensirekisterointipvm tosiaan on tyypiltään text eikä yksi PostgreSQL:n aikatyypeistä (date, interval, timestamp…). Yksi ratkaisu ongelmaan olisi muuttaa sarakkeen tyyppi kyselyssä oikeaan muotoon: SELECT count(*) FROM tieliikenne WHERE EXTRACT(YEAR FROM to_date(ensirekisterointipvm, &#39;YYYY-MM-DD&#39;)) &gt; 2015; Tietotyyppimuunnoksen (castaus) voi tehdä myös käyttäen ::-operaattoria: SELECT count(*) FROM tieliikenne WHERE extract(YEAR FROM ensirekisterointipvm::date) &gt; 2015; Tässä tapauksessa fiksumpaa olisi kuitenkin muuttaa koko sarakkeen tyyppi oikeaksi, sillä kyseessä on selkeästi päivämääräsarake. 4.1 Harjoitus 4.1: Ota oikea tietotyyppi käyttöön Muuta tieliikenne-taulun ensirekisterointipvm-sarake käyttämään oikeaa date-tietotyyppiä. Käytä syntaksia: ALTER TABLE taulun_nimi ALTER COLUMN kenttä TYPE &lt;tyyppi&gt; USING to_date(kenttä, &#39;päivämääräformaatti&#39;); Voit tarkistaa ohjeen to_date-funktion käyttämiseen ja päivämääräformaatin muotoon PostgreSQL:n manuaalista: https://www.postgresql.org/docs/13/functions-formatting.html#FUNCTIONS-FORMATTING-DATETIME-TABLE SELECT ensirekisterointipvm, kayttoonottopvm FROM tieliikenne LIMIT 10; Kirjoita kentän muuttamisen lause. Muunnoksen suorittamisessa menee hetki. ALTER ... Vastaus Tarkistus: Kokeile nyt uudestaan tiedoston alussa olevaa kyselyä: SELECT count(*) FROM tieliikenne WHERE EXTRACT(YEAR FROM ensirekisterointipvm) &gt; 2015; 4.2 Harjoitus 4.2 Muuta seuraavaksi myös sarake kayttoonottopvm käyttämään date-tietotyyppiä. Tässä kohtaat kaksi ongelmaa: to_date-funktio ottaa vastaan tekstimuotoista dataa, kun taas kayttoonottopvm on numeerista dataa… osa kayttoonottopvm arvoista on arvossa 0, jotta se on ensin muunnettava arvoksi Null, jotta funktio to_date toimisi oikein. Käytä tässä syntaksia: UPDATE taulun_nimi SET kenttä = uusi_arvo WHERE kenttä = haluttu_arvo; Vastaus Tarkistus: Kokeile nyt vastaavaa kyselyä: SELECT count(*) FROM tieliikenne WHERE EXTRACT(YEAR FROM kayttoonottopvm) &gt; 2015; Saitko Tulokseksi 710287? 4.3 Geometriatyyppi PostGIS-lisäosan mukana tulee laaja tuki erilaisille geometriatyypeille ja muunnosfunktioille. Katso taulun kunnat dataa Helsinki-rivin kautta. SELECT * FROM kunnat WHERE nimi = &#39;Helsinki&#39;; geom-kentän sisältö on binääristä, eikä sitä pysty tulkitsemaan. PostGISin ST_AsText-funktiolla tämä onnistuu SELECT nimi, ST_AsText(geom) FROM kunnat WHERE nimi = &#39;Helsinki&#39;; Nyt paljastuu jo, että kyseessä on polygoni, tai tarkemmin multipolygoni, joka sisältää paljon koordinaatteja. Harjoitusympäristöön on rakennettu toiminnalisuus, jolla geometriakohteita pystyy visualisoimaan interaktiivisesti 4.4 Harjoitus 4.3: Visualisoi geometrioita pgAdmilla Myös pgAdminilla pystyy visualisoimaan geometriakohteita interaktiivisesti. Kokeile ajaa seuraava komento ja paina sinistä nappia geometria-sarakkeen kohdalta SELECT * FROM kunnat; Jotta saisit näkyviin taustakartan, on geometriat projisoitava WGSG84-koordinaattijärjestelmään, joka on muodostuu pituus- ja leveysasteista metrisen projektion sijaan. SELECT nimi, ST_Transform(geom, 4326) FROM kunnat; "],["indeksit.html", "5 Indeksit 5.1 Indeksien luominen 5.2 Indeksien koko 5.3 Indeksien poistaminen 5.4 Harjoitus 5.1: Spatiaalinen indeksi", " 5 Indeksit Tässä osassa luodaan erilaisia indeksejä ja tarkastellaan niiden vaikutusta. Luetaan taulusta kuinka monella rivillä ajoneuvoluokka on M1. Tarkista kuinka kauan kyselyn suorittamiseen meni. SELECT count(*) FROM tieliikenne WHERE ajoneuvoluokka = &#39;M1&#39; 5.1 Indeksien luominen Luodaan yksinkertainen B-TREE -indeksi sarakkeelle ajoneuvoluokka: CREATE INDEX ajoneuvoluokka_idx ON tieliikenne(ajoneuvoluokka) Tarkista nyt uudestaaan, kuinka kauan yllä olevan kyselyn suoritus kestää. 5.2 Indeksien koko Indeksit kasvattavat tietokannan kokoa. Aja seuraava solu nähdäksesi kaikkientieliikenne-taulun indeksien koot: SELECT pg_size_pretty(pg_indexes_size(&#39;tieliikenne&#39;)); 5.3 Indeksien poistaminen Indeksin voi poistaa syntaksilla: DROP INDEX &lt;nimi&gt;; Esimerkiksi: DROP INDEX ajoneuvoluokka_idx; 5.4 Harjoitus 5.1: Spatiaalinen indeksi Indeksit ovat erityisen tärkeitä paikkatiedon parissa työskennellessä. Yritä seuraavaa kyselyä aluksi aineistolla, jolla ei ole indeksejä. Tarkista suoritusaika. WITH helsinki AS (SELECT geom, nimi FROM kunnat WHERE nimi = &#39;Helsinki&#39;) SELECT count(*) FROM digiroad_uusimaa a JOIN helsinki b ON ST_Intersects(b.geom, a.geom); Luo nyt spatiaalinen indeksi kunnat_geom_idx taululle kunnat syntaksilla: CREATE INDEX nimi ON taulu USING GIST (&quot;geom&quot;) CREATE INDEX kunnat_geom_idx ON kunnat USING GIST (&quot;geom&quot;) Mittaa sitten uudelleen aika kyselyn suorittamiseen, nopeutuiko suoritus? Luo vielä spatiaalinen indeksi digiroad_geom_idx taululle digiroad_uusimaa CREATE INDEX digiroad_geom_idx ON digiroad_uusimaa USING GIST (&quot;geom&quot;) Mittaa aika uudelleen Visualisoidaan helsingin teitä. Kyselyn suorittamisessa menee hetki WITH helsinki AS ( SELECT geom, nimi FROM kunnat WHERE nimi = &#39;Helsinki&#39; ) SELECT a.id, arvo, muokkauspv, a.geom FROM digiroad_uusimaa a JOIN helsinki b ON ST_Intersects(b.geom, a.geom) ; "],["käyttäjien-hallinta.html", "6 Käyttäjien hallinta 6.1 Käyttäjäroolit 6.2 Harjoitus 6.1: käyttöoikeudet 6.3 Ryhmäroolit 6.4 Roolien käyttöä 6.5 Harjoitus 6.2: Roolien luominen pgAdmin kautta", " 6 Käyttäjien hallinta Tässä osassa tutustutaan erilaisiin käyttäjärooleihin ja niiden hallintaan. 6.1 Käyttäjäroolit PostgreSQL:ssä käyttäjiä hallitaan rooleina (roles). Rooleja, joilla kirjaudutaan tietokantaan, kutsutaan nimellä login roles. Rooleja, jotka sisältävät muita rooleja kutsutaan nimellä group roles. Group role ryhmiin voidaan myös määrittää kirjautumisoikeudet tietokantaan, mutta tietokannan ylläpito on helpompi jos sitä vältetään. Aiemmissa PostgreSQLversioissa käytetiin termejä users ja group, edelleen niitä voi käyttää mutta kannattaa käyttää vastaavia uusia termejä, role ja group role. Oletuksena PostgreSQL asennuksessa on luotu postgres nimiset rooli ja tietokanta. Sen lisäksi aiemmin luotiin koulutus niminen tietokanta. Luo nyt uusi rooli, jonka nimi on matti: CREATE ROLE matti LOGIN PASSWORD &#39;1234&#39; CREATEDB VALID UNTIL &#39;infinity&#39;; CREATEDB valitsin määrittää oikeudet roolille luoda tietokantoja. VALID määrittää kuinka pitkään rooli on voimassa. Uusi matti rooli on voimassa toistaiseksi. Sillä on oikeudet tietokantojen luomiseen, muttei ole määritelty ylläpitäjäksi, eli sillä on rajoitetut oikeudet. Luo nyt rooli, jolla on ylläpitäjän oikeudet käyttämällä SUPERUSER valitsinta: CREATE ROLE yp LOGIN PASSWORD &#39;1234&#39; SUPERUSER VALID UNTIL &#39;2021-1-1 00:00&#39;; Uusi yp-roolilla on ylläpidon oikeudet ja sen salasana on voimaassa 1. tammikuun 2021 asti. Kun haluat nähdä palvelimessa olemassa roolit, käytä seuraavaa psql-komentoa: . Luodaan vielä kolmas käyttäjä maija: CREATE ROLE maija LOGIN PASSWORD &#39;1234&#39;; Käyttöoikeuksien lisääminen Käyttöoikeuksia voi lisätä GRANT-komennolla ja vastaavasti niitä voi poistaa REVOKE-komennolla. Kokeillaan lukea matti-käyttäjänä taulua etunimet. Kirjaudu ensin tietokantaan matin tunnuksilla. Luodaan uusi tietokantayhteys luvun Tietokantayhteyden lisääminen ohjeiden mukaisesti. SELECT * FROM etunimet LIMIT 10; Lukeminen ei onnistunut käyttöoikeuksien puutteen takia. Lisää postgres-käyttäjänä matille käyttöoikeus lukea taulua etunimet ja myös oikeus luoda uusia skeemoja ja tauluja GRANT SELECT ON etunimet TO matti; GRANT CREATE ON DATABASE koulutus TO matti; Nyt lukemisen pitäisi onnistua Luo nyt matti-käyttäjänä skeema matin_skeema ja sinne taulu matit. Poista samalla publicilta oikeudet tauluun. CREATE SCHEMA matin_skeema; CREATE TABLE matin_skeema.matit AS (SELECT * FROM etunimet WHERE nimi LIKE &#39;Mat%&#39;); REVOKE ALL ON TABLE matin_skeema.matit FROM public; Yritä nyt käyttäjänä maija lukea taulua matit. Luo ensin maijalle oma tietokantayhteys. SELECT * FROM matin_skeema.matit LIMIT 10; 6.2 Harjoitus 6.1: käyttöoikeudet Lisää käyttäjälle maija käyttöoikeudet lukea ja kirjoittaa taulua matin_skeema.matit -- Tämä ajetaan postgres-käyttäjänä -- Luo maijalle oikeus lukea taulua etunimet GRANT SELECT ... -- Anna maijalle oikeus käyttää skeemaa matin_skeema GRANT USAGE ON SCHEMA ... -- Anna maijalle luku- ja kirjoitusoikeus tauluun matin_skeema.matit GRANT SELECT, INSERT ... Vastaus: -- Tämä ajetaan postgres-käyttäjänä GRANT SELECT ON etunimet TO maija; GRANT USAGE ON SCHEMA matin_skeema TO maija; GRANT SELECT, INSERT ON matin_skeema.matit TO maija; Lisää samalla tauluun myös etunimet, jotka alkavat merkkijonolla “Maij”. -- Tämä ajetaan maija-käyttäjänä INSERT ... Vastaus: INSERT INTO matin_skeema.matit (SELECT * FROM etunimet WHERE nimi LIKE &#39;Maij%&#39;); Tarkistus: Tarkista, että sait lisättyä Maijalle käyttöoikeudet. SELECT count(*) FROM matin_skeema.matit WHERE nimi LIKE &#39;Maij%&#39; Saitko tulokseksi 43 riviä? 6.3 Ryhmäroolit Group role luodaan SQL komennolla: CREATE ROLE roolin_nimi INHERIT; CREATE ROLE editor INHERIT; INHERIT valitsin tarkoittaa se, että editor rooli perii oikeudet niiltä rooleilta, joiden jäsen se on. Poikeuksena superuser oikeus, joka ei kuitenkaan koskaan periydy PostgreSQL:ssä. Lisää äsken luomasi roolit ryhmään seuraavasti: GRANT editor TO matti; GRANT editor TO yp; 6.4 Roolien käyttöä Tähän asti olemme muodostanut yhteyttä palvelimeen postgres-roolilla, jolla muun muuassa on ylläpitäjän oikeudet. Salasana on tallennettu ympäristömuuttujaan, josta psql osaa sen kaivaa. Psql:n saa kuitenkin kysymään salasanaa antamalla sille argumentin W. Kirjautuminen tapahtuu konsolista tällä tutulla komennolla: psql -U matti -W Kirjautuessa pyydetään salasana, sen määriteltiin aiemmin: 1234. Mutta kirjautuminen kuitenkin epäonnistu, koska palvelimesta ei löytynyt matti-nimistä tietokantaa. PostgreSQL vaatii, että kirjaudutaan johonkin tietokantaan. Tähän asti ei tämä ole ollut ongelmaa koska, kirjauduttiin PostgreSQL postgres-roolilla ja saman nimisen tietokanta on kyllä olemassa palvelimessa. Kun kirjaudutaan PostgreSQL, täytyy määritellä tietokannan nimi. Esimerkiksi: psql -U matti -d koulutus -W Huomaa vielä, että nyt psql-konsolissa tietokannan nimen jälkeen merkki on nyt &gt; eikä #. Tämä tarkoittaa, että käyttäjällä ei ole ylläpidon oikeuksia. 6.5 Harjoitus 6.2: Roolien luominen pgAdmin kautta Roolien hallinta pgAdmin käyttöliittymän kautta on huomattavasti selkeämpää. createrole_pgadmin Luo vielä yksi uusi rooli painamalla oikea hiiren näppäintä Login roles kohtaa ja täytä tiedot eri välilehdissä seuraavaksi: nimi: tiia salasan: 1234 rooliryhmä: editor ylläpitäjän oikeudet Tutustuu muihin asetuksia ja kokeile niitä uudessa roolissa. Kokeile myös poistaa yp-rooli käyttöliittymän kautta. SQL-komento käyttäjien poistamiseen on DROP ROLE &lt;nimi&gt;; Harjoitus 6.3: Tietokannan omistussuhteen muutos Edellisissä harjoituksessa luotiin tietokanta koulutus. Tietokannan omistaja on postgres. Vaihdetaan nyt omistus matti-roolille. Muodosta konsolilla uutta yhteyttä tietokantaan postgres-roolilla, sillä taulun omistajan vaihdon voi suorittaa vain ylläpitäjä tai taulun omistaja. Käytä syntaksia: ALTER DATABASE tietokanta OWNER TO käyttäjä; ALTER ... Vastaus: ALTER DATABASE koulutus OWNER TO matti; Tarkistus: Aja alla olevat kaksi solua tarkistaaksesi, että omistuksen muutos onnistui. SELECT d.datname as &quot;Name&quot;, pg_catalog.pg_get_userbyid(d.datdba) as &quot;Owner&quot; FROM pg_catalog.pg_database d WHERE d.datname = &#39;koulutus&#39; ORDER BY 1; Onko Owner matti? "],["foreign-data-wrapper-fdw.html", "7 Foreign Data Wrapper (fdw) 7.1 file_fdw -lisäosa tiedostojen lukemiseen 7.2 Harjoitus 7.1: csv-tiedostosta lukeminen 7.3 Harjoitus 7.2: Toisesta PostgreSQL-kannasta lukeminen", " 7 Foreign Data Wrapper (fdw) Tässä osassa tutustutaan fdw:ihin csv-tiedoston lukemisen kautta. 7.1 file_fdw -lisäosa tiedostojen lukemiseen Asenna aluksi file_fdw-lisäosa, jonka kautta voidaan luoda fdw csv-tiedostojen lukemiseen. CREATE EXTENSION file_fdw; Luo sitten foreign server käyttäen file_fdw fdw:tä. CREATE SERVER log_server FOREIGN DATA WRAPPER file_fdw; Ladataan nyt vieraana tauluna sama etunimet.csv-tiedosto, kuin aikaisemmin tehdyssä harjoituksessa: CREATE FOREIGN TABLE etunimet2 ( nimi text NOT NULL, lukumaara integer NOT NULL, sukupuoli text NOT NULL ) SERVER log_server OPTIONS(filename &#39;/home/oppilas/pg-training/Harjoitukset/data/etunimet.csv&#39;, format &#39;csv&#39;, header &#39;true&#39;); Tarkistetaan, että taulusta lukeminen toimii: SELECT * FROM etunimet2 LIMIT 20; Vieraan taulun voi poistaa syntaksilla: DROP FOREIGN TABLE &lt;taulun_nimi&gt;; Esimerkiksi: DROP FOREIGN TABLE etunimet2; 7.2 Harjoitus 7.1: csv-tiedostosta lukeminen Luo vieras taulu audit_log käyttäen tiedostoa audit_log.csv. Kenttien nimet ovat ensimmäisellä rivillä. FOREIGN TABLE audit_log ( log_time timestamp with time zone, user_name text, database_name text, process_id integer, connection_from text, session_id text, session_line_num integer, process_status text, session_start_time timestamp with time zone, virtual_transaction_id text, transaction_id integer, error_severity text, sql_state_code integer, message text, detail text, hint text, internal_query text, internal_query_pos text, context text, query text, query_pos integer, location text, application_name text, command_tag text, audit_tag text ) SERVER ... Vastaus Listaa audit_log-taulun rivit SELECT * FROM audit_log; Tarkistus: Aja alla oleva lauseke tarkistaaksesi, että rivejä on oikea määrä SELECT count(*) FROM audit_log; Onko rivejä 32? 7.3 Harjoitus 7.2: Toisesta PostgreSQL-kannasta lukeminen Tässä harjoituksessa luetaan tietokannan postgres taulua kunnat kannan koulutus sisältä. Ota aluksi käyttöön lisäosa postgres_fdw CREATE ... Vastaus Luo sitten foreign server postgres_server käyttäen postgres_fdw:tä CREATE SERVER postgres_server FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host &#39;localhost&#39;, port &#39;5432&#39;, dbname &#39;postgres&#39;); postgres_fdw:n kanssa on tehtävä myös käyttäjämäppäys, jolla nykyisen tietokannan käyttäjälle annetaan vastine toisen tietokannan parissa. CREATE USER MAPPING FOR postgres SERVER postgres_server OPTIONS (user &#39;postgres&#39;, password &#39;&lt;KYSY SALASANA&gt;&#39;); Koska luemme taulua kunnat, ota käyttöön nykyiseen tietokantaan lisäosa postgis. CREATE ... Vastaus Luodaan nyt vieras taulu kunnat. Täytä arvot parametreihin schema_name ja table_name. CREATE FOREIGN TABLE kunnat ( ogc_fid integer, geom geometry(MultiPolygon,3067), nimi character varying, id numeric(10,0) ) SERVER postgres_server OPTIONS (schema_name &#39;täydennä&#39;, table_name &#39;täydennä&#39;); CREATE FOREIGN TABLE kunnat ( ogc_fid integer, geom geometry(MultiPolygon,3067), nimi character varying, id numeric(10,0) ) SERVER postgres_server OPTIONS (schema_name &#39;public&#39;, table_name &#39;kunnat&#39;); Tarkistus: Listaa kunnat-taulun rivejä SELECT id, nimi FROM kunnat; Onko rivejä 95? "],["vastaukset.html", "Vastaukset Harjoitus 3.2 Harjoitus 4.1 Harjoitus 4.2 Harjoitus 7.1 Harjoitus 7.2", " Vastaukset Harjoitus 3.2 DROP TABLE IF EXISTS etunimet; CREATE TABLE etunimet ( nimi text NOT NULL, lukumaara integer NOT NULL, sukupuoli text NOT NULL ) COPY etunimet(nimi, lukumaara, sukupuoli) FROM &#39;/home/oppilas/pg-training/Harjoitukset/data/etunimet.csv&#39; CSV HEADER; Takaisin harjoitukseen Harjoitus 4.1 ALTER TABLE tieliikenne ALTER COLUMN ensirekisterointipvm TYPE DATE USING to_date(ensirekisterointipvm, &#39;YYYY-MM-DD&#39;) Harjoitus 4.2 UPDATE tieliikenne SET kayttoonottopvm = Null WHERE kayttoonottopvm = 0; ALTER TABLE tieliikenne ALTER COLUMN kayttoonottopvm TYPE DATE USING to_date(kayttoonottopvm::text, &#39;YYYYMMDD&#39;); Takaisin harjoitukseen Harjoitus 7.1 CREATE FOREIGN TABLE audit_log ( log_time timestamp with time zone, user_name text, database_name text, process_id integer, connection_from text, session_id text, session_line_num integer, process_status text, session_start_time timestamp with time zone, virtual_transaction_id text, transaction_id integer, error_severity text, sql_state_code integer, message text, detail text, hint text, internal_query text, internal_query_pos text, context text, query text, query_pos integer, location text, application_name text, command_tag text, audit_tag text ) SERVER log_server OPTIONS(filename &#39;/home/oppilas/pg-training/Harjoitukset/data/audit_log.csv&#39;, format &#39;csv&#39;, header &#39;true&#39;); Takaisin harjoitukseen Harjoitus 7.2 CREATE EXTENSION postgres_fdw; CREATE EXTENSION postgis; Takaisin harjoitukseen "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
